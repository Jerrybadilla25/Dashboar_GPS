import Location from "../models/position";
import User from "../models/user";

export class LocationService {
  // Obtener todas las ubicaciones
  static async getAllLocations() {
    try {
      //console.log('üìã Buscando todas las ubicaciones de las √∫ltimas 24 horas...');

      // Calcular la fecha de hace 24 horas
      const twentyFourHoursAgo = new Date();
      twentyFourHoursAgo.setHours(twentyFourHoursAgo.getHours() - 24);

      // Intentar obtener ubicaciones de las √∫ltimas 24 horas
      let locations = await Location.find({
        timestamp: {
          $gte: twentyFourHoursAgo, // Mayor o igual a hace 24 horas
        },
      })
        .populate("userId", "email deviceId name")
        .sort({ timestamp: -1 })
        .limit(1000);

      // Si no hay datos en las √∫ltimas 24 horas, buscar los m√°s recientes disponibles
      if (locations.length === 0) {
        console.log(
          "‚ö†Ô∏è No se encontraron ubicaciones en las √∫ltimas 24 horas. Buscando datos m√°s recientes..."
        );

        locations = await Location.find()
          .populate("userId", "email deviceId name")
          .sort({ timestamp: -1 })
          .limit(100); // Limitar a los 100 m√°s recientes como fallback

        //console.log(`üîÑ Fallback activado: Encontradas ${locations.length} ubicaciones m√°s recientes`);
      } else {
        //console.log(`‚úÖ Encontradas ${locations.length} ubicaciones de las √∫ltimas 24 horas`);
      }

      return locations;
    } catch (error) {
      console.error("‚ùå Error en getAllLocations service:", error);
      throw new Error(`Error fetching locations: ${error.message}`);
    }
  }

  // Obtener ubicaciones recientes (√∫ltimas horas)
  static async getRecentLocations(hours = 24, emailId) {
    try {
      //console.log(`‚è∞ Buscando ubicaciones de las √∫ltimas ${hours} horas...`);
      //console.log({emailId});
      const date = new Date();
      date.setHours(date.getHours() - hours);
      //console.log('Fecha l√≠mite:', date);

      const locations = await Location.find({
        email: emailId,
      })
        .sort({ timestamp: -1 })
        .limit(500);
      //console.log({locations});
      //console.log(`‚úÖ Encontradas ${locations.length} ubicaciones recientes`);
      return locations;
    } catch (error) {
      console.error("‚ùå Error en getRecentLocations service:", error);
      throw new Error(`Error fetching recent locations: ${error.message}`);
    }
  }

  // Obtener todos los usuarios activos
  static async getActiveUsers() {
    try {
      //console.log('üë• Buscando usuarios activos...');
      const users = await User.find({
        isActive: true,
      }).sort({ lastActive: -1 });

      //console.log(`‚úÖ Encontrados ${users.length} usuarios activos`);
      return users;
    } catch (error) {
      console.error("‚ùå Error en getActiveUsers service:", error);
      throw new Error(`Error fetching active users: ${error.message}`);
    }
  }

  // Obtener la √∫ltima ubicaci√≥n de un usuario
  static async getLatestLocation(emailId) {
    try {
      console.log(`üìç Buscando √∫ltima ubicaci√≥n para: ${emailId}`);

      const location = await Location.findOne({
        email: emailId,
      })
        .sort({ timestamp: -1 })
        .limit(1);

      console.log(`‚úÖ √öltima ubicaci√≥n encontrada:`, location ? "S√≠" : "No");
      return location;
    } catch (error) {
      console.error("‚ùå Error en getLatestLocation service:", error);
      throw new Error(`Error fetching latest location: ${error.message}`);
    }
  }
}
